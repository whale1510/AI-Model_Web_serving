# -*- coding: utf-8 -*-
"""프로젝트_예측서버모델

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dmRYmmkfyJIgjSVt7frBbWD40nBCrUkk
"""

#!pip install fastapi uvicorn

#!pip install  nest-asyncio pyngrok

#from google.colab import drive
#drive.mount("/content/gdrive")

import numpy as np

"""# 모델 불러오기"""

import pickle
from tensorflow.keras.models import load_model
import pandas as pd

# 서버 관리용 fastapi 의존 라이브러리
import uvicorn

# fast api 라이브러리
from fastapi import FastAPI

# 인터페이스 데이터 관리를 위한 라이브러리
from pydantic import BaseModel

from fastapi.middleware.cors import CORSMiddleware
origins = ["*"]

app = FastAPI(title="ML API")

# CORS 미들웨어 추가
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 모든 origin 허용
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

with open("/dlcore.dump","rb") as fr:
    loadedRef = pickle.load(fr)

"""
class InDataset(BaseModel):
    inPromotion : str
    inHoliday : str
    inPropercent : float
    inHclus : int
"""
class InDataset(BaseModel):
  gender : str
  car : str
  reality : str
  child_num : int
  income_total : float
  income_type : str
  edu_type : str
  house_type : str
  DAYS_BIRTH : int

"""
  customer_index : int
  customer_gender : str
  customer_car : str
  customer_reality : str
  customer_child_num : int
  customer_income_total : float
  customer_income_type : str
  customer_edu_type : str
  customer_family_type : str
  customer_house_type : str
  customer_DAYS_BIRTH : int
  customer_DAYS_EMPLOYED : int
  customer_FLAG_MOBIL : int
  customer_work_phone : int
  customer_phone : int
  customer_email  : int
  customer_occyp_type : str
  customer_family_size : float
  customer_begin_month : float
  customer_credit : float
  """

loadedModel = load_model("/dlcore_last.h5")

loadedModel.summary()

loadedRef

preProcessingFunc = loadedRef["preprocessing"]

preProFunc = loadedRef["preprocessing"]
categorical_features = loadedRef["categorical_feature"]
numeric_features = loadedRef["numeric_feature"]
label = loadedRef["label"]

encoder = preProFunc[0]
scaler = preProFunc[1]

# 전처리 함수 불러오기
"""
ynLabel = preProcessingFunc[0]
promotionScaler = preProcessingFunc[2]
hclusScaler = preProcessingFunc[3]
"""

@app.post("/predictdl", status_code=200)
async def predictDl(x:InDataset):
    print(x)
    customer_index = 1
    customer_gender = x.gender
    customer_car = x.car
    customer_reality = x.reality
    customer_child_num = x.child_num
    customer_income_total = x.income_total
    customer_income_type  = x.income_type
    customer_edu_type = x.edu_type
    customer_family_type = 'Civil marriage'
    customer_house_type = x.house_type
    customer_DAYS_BIRTH = x.DAYS_BIRTH
    customer_DAYS_EMPLOYED = -1540
    customer_FLAG_MOBIL = 1
    customer_work_phone = 0
    customer_phone = 0
    customer_email  =  1
    customer_occyp_type = 'Laborers'
    customer_family_size = 3.0
    customer_begin_month =-5.0
    customer_credit =1.0

    ####test###
    # customer_index = 1
    # customer_gender ="F"
    # customer_car = "N"
    # customer_reality = "Y"
    # customer_child_num = 1
    # customer_income_total = 247500.0
    # customer_income_type  = "Commercial associate"
    # customer_edu_type = "Secondary / secondary special"
    # customer_family_type = 'Civil marriage'
    # customer_house_type ="House / apartment"
    # customer_DAYS_BIRTH = -11380
    # customer_DAYS_EMPLOYED = -1540
    # customer_FLAG_MOBIL = 1
    # customer_work_phone = 0
    # customer_phone = 0
    # customer_email  =  1
    # customer_occyp_type = 'Laborers'
    # customer_family_size = 3.0
    # customer_begin_month =-5.0
    # customer_credit =1.0

    #inPromotion = x.inPromotion
    #inHoliday = x.inHoliday
    #inPropercent =x.inPropercent
    #inHclus = x.inHclus
    print("step1")
    # 입력데이터 전처리
    df = pd.DataFrame([[customer_index, customer_gender, customer_car,customer_reality, customer_child_num, customer_income_total, customer_income_type, customer_edu_type, customer_family_type, customer_house_type, customer_DAYS_BIRTH, customer_DAYS_EMPLOYED , customer_FLAG_MOBIL, customer_work_phone, customer_phone, customer_email   , customer_occyp_type , customer_family_size, customer_begin_month, customer_credit]])

    df.columns = ['index', 'gender', 'car', 'reality', 'child_num', 'income_total',
        'income_type', 'edu_type', 'family_type', 'house_type', 'DAYS_BIRTH',
        'DAYS_EMPLOYED', 'FLAG_MOBIL', 'work_phone', 'phone', 'email',
        'occyp_type', 'family_size', 'begin_month', 'credit']


    categorical_encoded = encoder.transform(df[categorical_features])
    # 원-핫 인코딩된 피처 이름 생성
    encoded_feature_names = encoder.get_feature_names_out(categorical_features)

    numeric_scaled = scaler.transform(df[numeric_features])

    # 원-핫 인코딩된 데이터와 스케일된 데이터를 결합
    encoded_data = np.hstack((categorical_encoded, numeric_scaled))

    # 결과를 데이터프레임으로 변환
    all_feature_names = list(encoded_feature_names) + numeric_features
    df_processed = pd.DataFrame(encoded_data, columns=all_feature_names)
    print("step2")
    # 예측을 위한 데이터셋 생성
    test_data = df_processed.drop('credit', axis=1)
    predictValue = loadedModel.predict(test_data)
    predictValue
    print(predictValue)
    predictValue = np.argmax([predictValue[0][0],predictValue[0][1],predictValue[0][2]])
    print(predictValue)
    predictValue = int(predictValue)
    result = {"prediction":predictValue}
    return result

@app.get("/")
async def root():
    return {"message":"onine"}

# c =[[0.14819247, 0.3527784,
#        0.49902913]]
# np.argmax(c)

"""
import nest_asyncio
from pyngrok import ngrok
import uvicorn

auth_token = "2hX2mHjah4Bi6eqmwmQIwVGElHg_2CsQgxNdnLRwHUphsSxGM"
ngrok.set_auth_token(auth_token)
ngrokTunnel = ngrok.connect(8000)
print("공용 URL", ngrokTunnel.public_url)
nest_asyncio.apply()
uvicorn.run(app, port=8000)
"""
import uvicorn
if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=9999, log_level="debug",
    proxy_headers=True, reload=True)

